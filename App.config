<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="hibernate-fluent-configuration" type="Fidelity.Framework.PersistencyLayer.FluentConfigurationSection, Fidelity.Framework.PersistencyLayer" />
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>

  <connectionStrings>
    <add name="allocation" connectionString="Data Source=IT-PAULB7\SQLEXPRESS; Initial Catalog=Jupiter; Trusted_Connection=true;;" providerName="System.Data.SqlClient" />
  </connectionStrings>

  <hibernate-fluent-configuration>
    <!--hibernate-fluent-configuration: supports multiple session factories using fluentnhibernate-->
    <session-factories>
      <clear />
      <add name="allocation" connection_string_name="allocation" mapped_assemblies="Fidelity.Allocation.DomainLayer,Fidelity.Allocation.External.DomainLayer" />
    </session-factories>
  </hibernate-fluent-configuration>

  <unity>
    <!--
		  unity - configures injectible persistency layer elements
		-->
    <typeAliases>
      <!-- Unity Container Lifetime manager types -->
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
      <typeAlias alias="external" type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager, Microsoft.Practices.Unity" />
      <!-- Type aliases for service interfaces -->
      <typeAlias alias="ISessionCache" type="Fidelity.Framework.PersistencyLayer.ISessionCache, Fidelity.Framework.PersistencyLayer" />
      <typeAlias alias="ISessionManager" type="Fidelity.Framework.PersistencyLayer.ISessionManager, Fidelity.Framework.PersistencyLayer" />
      <typeAlias alias="ISessionCache" type="Fidelity.Framework.PersistencyLayer.ISessionCache, Fidelity.Framework.PersistencyLayer" />
      <typeAlias alias="ISessionManager" type="Fidelity.Framework.PersistencyLayer.ISessionManager, Fidelity.Framework.PersistencyLayer" />
      <typeAlias alias="IAccountRepository" type="Fidelity.Allocation.PersistencyLayer.IAccountRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IAccountEntryRepository" type="Fidelity.Allocation.PersistencyLayer.IAccountEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IAllocationRuleRepository" type="Fidelity.Allocation.PersistencyLayer.IAllocationRuleRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IAllocationRuleItemRepository" type="Fidelity.Allocation.PersistencyLayer.IAllocationRuleItemRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IBankAccountRepository" type="Fidelity.Allocation.PersistencyLayer.IBankAccountRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IBankStatementRepository" type="Fidelity.Allocation.PersistencyLayer.IBankStatementRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IBatchRepository" type="Fidelity.Allocation.PersistencyLayer.IBatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IExpectedAccountEntryRepository" type="Fidelity.Allocation.PersistencyLayer.IExpectedAccountEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IExpectedTransactionRepository" type="Fidelity.Allocation.PersistencyLayer.IExpectedTransactionRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IJournalRepository" type="Fidelity.Allocation.PersistencyLayer.IJournalRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IJournalEntryRepository" type="Fidelity.Allocation.PersistencyLayer.IJournalEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IPaymentRepository" type="Fidelity.Allocation.PersistencyLayer.IPaymentRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IPaymentBatchRepository" type="Fidelity.Allocation.PersistencyLayer.IPaymentBatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IReceiptRepository" type="Fidelity.Allocation.PersistencyLayer.IReceiptRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="IReceiptBatchRepository" type="Fidelity.Allocation.PersistencyLayer.IReceiptBatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="ITransactionRepository" type="Fidelity.Allocation.PersistencyLayer.ITransactionRepository, Fidelity.Allocation.PersistencyLayer" />
      <!-- Services -->
      <typeAlias alias="IAllocationRuleServices" type="Fidelity.Allocation.App.IAllocationRuleServices, Fidelity.Allocation.App"></typeAlias>
      <typeAlias alias="IBankStatementServices" type="Fidelity.Allocation.App.IBankStatementServices, Fidelity.Allocation.App"></typeAlias>
      <typeAlias alias="ITransactionServices" type="Fidelity.Allocation.App.ITransactionServices, Fidelity.Allocation.App"></typeAlias>
      <!-- External-->
      <typeAlias alias="IBankTransactionServices" type="Fidelity.Allocation.External.App.IBankTransactionServices, Fidelity.Allocation.External.App" />
      <typeAlias alias="IBankTransactionRepository" type="Fidelity.Allocation.External.PersistencyLayer.IBankTransactionRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <typeAlias alias="IBankTransactionHeaderRepository" type="Fidelity.Allocation.External.PersistencyLayer.IBankTransactionHeaderRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <typeAlias alias="IPayBankPaymentRequestFileServices" type="Fidelity.Allocation.External.App.IPayBankPaymentRequestFileServices, Fidelity.Allocation.External.App" />
      <typeAlias alias="IPayBankPaymentRequestFileRepository" type="Fidelity.Allocation.External.PersistencyLayer.IPayBankPaymentRequestFileRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <!-- Type aliases for service implementations -->
      <typeAlias alias="SessionCache" type="Fidelity.Framework.PersistencyLayer.DefaultSessionCache, Fidelity.Framework.PersistencyLayer" />
      <typeAlias alias="SessionManager" type="Fidelity.Framework.PersistencyLayer.DefaultSessionManager, Fidelity.Framework.PersistencyLayer" />
      <typeAlias alias="AccountRepository" type="Fidelity.Allocation.PersistencyLayer.AccountRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="AccountEntryRepository" type="Fidelity.Allocation.PersistencyLayer.AccountEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="AllocationRuleRepository" type="Fidelity.Allocation.PersistencyLayer.AllocationRuleRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="AllocationRuleItemRepository" type="Fidelity.Allocation.PersistencyLayer.AllocationRuleItemRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="BankAccountRepository" type="Fidelity.Allocation.PersistencyLayer.BankAccountRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="BankStatementRepository" type="Fidelity.Allocation.PersistencyLayer.BankStatementRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="BatchRepository" type="Fidelity.Allocation.PersistencyLayer.BatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="ExpectedAccountEntryRepository" type="Fidelity.Allocation.PersistencyLayer.ExpectedAccountEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="ExpectedTransactionRepository" type="Fidelity.Allocation.PersistencyLayer.ExpectedTransactionRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="JournalRepository" type="Fidelity.Allocation.PersistencyLayer.JournalRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="JournalEntryRepository" type="Fidelity.Allocation.PersistencyLayer.JournalEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="PaymentRepository" type="Fidelity.Allocation.PersistencyLayer.PaymentRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="PaymentBatchRepository" type="Fidelity.Allocation.PersistencyLayer.PaymentBatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="ReceiptRepository" type="Fidelity.Allocation.PersistencyLayer.ReceiptRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="ReceiptBatchRepository" type="Fidelity.Allocation.PersistencyLayer.ReceiptBatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <typeAlias alias="TransactionRepository" type="Fidelity.Allocation.PersistencyLayer.TransactionRepository, Fidelity.Allocation.PersistencyLayer" />
      <!-- Services -->
      <typeAlias alias="AllocationRuleServices" type="Fidelity.Allocation.App.AllocationRuleServices, Fidelity.Allocation.App"></typeAlias>
      <typeAlias alias="BankStatementServices" type="Fidelity.Allocation.App.BankStatementServices, Fidelity.Allocation.App"></typeAlias>
      <typeAlias alias="TransactionServices" type="Fidelity.Allocation.App.TransactionServices, Fidelity.Allocation.App"></typeAlias>
      <!-- External -->
      <typeAlias alias="BankTransactionServices" type="Fidelity.Allocation.External.App.BankTransactionServices, Fidelity.Allocation.External.App" />
      <typeAlias alias="BankTransactionRepository" type="Fidelity.Allocation.External.PersistencyLayer.BankTransactionRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <typeAlias alias="BankTransactionHeaderRepository" type="Fidelity.Allocation.External.PersistencyLayer.BankTransactionHeaderRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <typeAlias alias="PayBankPaymentRequestFileRepository" type="Fidelity.Allocation.External.PersistencyLayer.PayBankPaymentRequestFileRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <typeAlias alias="PayBankPaymentRequestFileServices" type="Fidelity.Allocation.External.App.PayBankPaymentRequestFileServices, Fidelity.Allocation.External.App" />
    </typeAliases>

    <containers>
      <container>
        <types>
          <!-- Map Service Interfaces to Implementations here .. -->
          <type type="ISessionCache" mapTo="SessionCache">
            <lifetime type="singleton" />
          </type>

          <type type="ISessionManager" mapTo="SessionManager">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="applicationName" parameterType="System.String" value="External.App" />
            </constructor>
          </type>

          <!-- Repositories require two parameters - one to resolves the session cache to be used and the second to 
							 identify the session factory  -->
          <type type="IAccountRepository" mapTo="AccountRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IAccountEntryRepository" mapTo="AccountEntryRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IAllocationRuleRepository" mapTo="AllocationRuleRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IAllocationRuleItemRepository" mapTo="AllocationRuleItemRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IBankAccountRepository" mapTo="BankAccountRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IBankStatementRepository" mapTo="BankStatementRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IBatchRepository" mapTo="BatchRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IExpectedAccountEntryRepository" mapTo="ExpectedAccountEntryRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IExpectedTransactionRepository" mapTo="ExpectedTransactionRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IJournalRepository" mapTo="JournalRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IJournalEntryRepository" mapTo="JournalEntryRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IPaymentRepository" mapTo="PaymentRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IPaymentBatchRepository" mapTo="PaymentBatchRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IReceiptRepository" mapTo="ReceiptRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IReceiptBatchRepository" mapTo="ReceiptBatchRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="ITransactionRepository" mapTo="TransactionRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <!-- Services -->
          <type type="IAllocationRuleServices" mapTo="AllocationRuleServices">
            <lifetime type="singleton" />
            <constructor>
              <param name="allocationRuleRepository">
                <dependency type="AllocationRuleRepository" />
              </param>
            </constructor>
          </type>
          <type type="IBankStatementServices" mapTo="BankStatementServices">
            <lifetime type="singleton" />
            <constructor>
              <param name="bankStatementRepository">
                <dependency type="BankStatementRepository" />
              </param>
              <param name="bankTransSrv">
                <dependency type="IBankTransactionServices" />
              </param>
              <param name="transRepo">
                <dependency type="ITransactionRepository" />
              </param>
              <param name="bankAccRepo">
                <dependency type="IBankAccountRepository" />
              </param>
            </constructor>
          </type>
          
          <!-- External -->
          <type type="IBankTransactionServices" mapTo="BankTransactionServices">
            <lifetime type="singleton" />
            <constructor>
              <param name="bankTransaction">
                <dependency type="BankTransactionRepository" />
              </param>
              <param name="bankTransHeadRep">
                <dependency type="IBankTransactionHeaderRepository" />
              </param>
            </constructor>
          </type>          
          <type type="IBankTransactionRepository" mapTo="BankTransactionRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>          
          <type type="IBankTransactionHeaderRepository" mapTo="BankTransactionHeaderRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IPayBankPaymentRequestFileRepository" mapTo="PayBankPaymentRequestFileRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IPayBankPaymentRequestFileServices" mapTo="PayBankPaymentRequestFileServices">
            <lifetime type="singleton" />
            <constructor>
              <param name="payBankPaymentRequestFile">
                <dependency type="PayBankPaymentRequestFileRepository" />
              </param>
            </constructor>
          </type>
        </types>
      </container>
    </containers>
  </unity>
  <!-- log4net - logger configuration -->
  <log4net>
    <!-- Database Appender  -->
    <appender name="AdoNetAppender" type="log4net.Appender.AdoNetAppender">
      <bufferSize value="1" />
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
      <connectionString value="data source=IT-PAULB7\SQLEXPRESS;initial catalog=Jupiter;Trusted_Connection=true;" />
      <commandText value="INSERT INTO Finance.Log ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
      <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout" />
      </parameter>
      <parameter>
        <parameterName value="@thread" />
        <dbType value="String" />
        <size value="255" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%thread" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@log_level" />
        <dbType value="String" />
        <size value="50" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%level" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@logger" />
        <dbType value="String" />
        <size value="255" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%logger" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@message" />
        <dbType value="String" />
        <size value="4000" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%message" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@exception" />
        <dbType value="String" />
        <size value="2000" />
        <layout type="log4net.Layout.ExceptionLayout" />
      </parameter>
    </appender>
    <appender name="trace" type="log4net.Appender.TraceAppender, log4net">
      <immediateFlush value="true" />
      <layout type="log4net.Layout.PatternLayout,log4net">
        <param name="ConversionPattern" value="-5p L - n" />
      </layout>
    </appender>
    <root>
      <!--<level value="DEBUG" />
      <appender-ref ref="AdoNetAppender" />-->
      <level value="ERROR" />
      <appender-ref ref="ConsoleAppender" />
    </root>

    <logger name="NHibernate">
      <level value="ERROR" />
    </logger>
    <logger name="NHibernate.SQL">
      <level value="ERROR" />
    </logger>

    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger [%ndc] - %message%newline" />
      </layout>
    </appender>
  </log4net>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
  </startup>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="log4net" publicKeyToken="669e0ddf0bb1aa2a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.2.12.0" newVersion="1.2.12.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity.Configuration" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="NHibernate" publicKeyToken="aa95f207798dfdb4" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.3.1.4000" newVersion="3.3.1.4000" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>
