<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="hibernate-fluent-configuration" type="Fidelity.Framework.PersistencyLayer.FluentConfigurationSection, Fidelity.Framework.PersistencyLayer" />
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>

  <connectionStrings>
    <add name="allocation" connectionString="Data Source=IT-PAULB7\SQLEXPRESS; Initial Catalog=Jupiter; Trusted_Connection=true;;" providerName="System.Data.SqlClient" />
  </connectionStrings>

  <hibernate-fluent-configuration>
    <!--hibernate-fluent-configuration: supports multiple session factories using fluentnhibernate-->
    <session-factories>
      <clear />
      <add name="allocation" connection_string_name="allocation" mapped_assemblies="Fidelity.Allocation.DomainLayer,Fidelity.Allocation.External.DomainLayer" />
    </session-factories>
  </hibernate-fluent-configuration>

  <unity>
    <assembly name="Fidelity.Allocation.App" />
    <namespace name="Fidelity.Allocation.App" />
    <!--
		  unity - configures injectible persistency layer elements
		-->
 
      <!-- Unity Container Lifetime manager types -->
      <alias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
      <alias alias="external" type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager, Microsoft.Practices.Unity" />
      <!-- Type aliases for service interfaces -->
      <alias alias="ISessionCache" type="Fidelity.Framework.PersistencyLayer.ISessionCache, Fidelity.Framework.PersistencyLayer" />
      <alias alias="ISessionManager" type="Fidelity.Framework.PersistencyLayer.ISessionManager, Fidelity.Framework.PersistencyLayer" />
      <alias alias="IEntityPreferenceService" type="Fidelity.Allocation.App.IEntityPreferenceService, Fidelity.Allocation.App" />
      <alias alias="IAccountRepository" type="Fidelity.Allocation.PersistencyLayer.IAccountRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IAccountEntryRepository" type="Fidelity.Allocation.PersistencyLayer.IAccountEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IAllocationRuleRepository" type="Fidelity.Allocation.PersistencyLayer.IAllocationRuleRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IAllocationRuleItemRepository" type="Fidelity.Allocation.PersistencyLayer.IAllocationRuleItemRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IBankAccountRepository" type="Fidelity.Allocation.PersistencyLayer.IBankAccountRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IBankStatementRepository" type="Fidelity.Allocation.PersistencyLayer.IBankStatementRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IBankTransactionRepository" type="Fidelity.Allocation.PersistencyLayer.IBankTransactionRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IBatchRepository" type="Fidelity.Allocation.PersistencyLayer.IBatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IInhouseAccountEntryRepository" type="Fidelity.Allocation.PersistencyLayer.IInhouseAccountEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IInhouseTransactionRepository" type="Fidelity.Allocation.PersistencyLayer.IInhouseTransactionRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IJournalRepository" type="Fidelity.Allocation.PersistencyLayer.IJournalRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IJournalEntryRepository" type="Fidelity.Allocation.PersistencyLayer.IJournalEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IPaymentRepository" type="Fidelity.Allocation.PersistencyLayer.IPaymentRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IPaymentBatchRepository" type="Fidelity.Allocation.PersistencyLayer.IPaymentBatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IReceiptRepository" type="Fidelity.Allocation.PersistencyLayer.IReceiptRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="IReceiptBatchRepository" type="Fidelity.Allocation.PersistencyLayer.IReceiptBatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="ITransactionRepository" type="Fidelity.Allocation.PersistencyLayer.ITransactionRepository, Fidelity.Allocation.PersistencyLayer" />
      <!-- Services -->
      <alias alias="IAccountServices" type="Fidelity.Allocation.App.IAccountServices, Fidelity.Allocation.App" />
      <alias alias="IAccountEntryServices" type="Fidelity.Allocation.App.IAccountEntryServices, Fidelity.Allocation.App" />
      <alias alias="IAllocationRuleServices" type="Fidelity.Allocation.App.IAllocationRuleServices, Fidelity.Allocation.App"></alias>
      <alias alias="IAllocationRuleItemServices" type="Fidelity.Allocation.App.IAllocationRuleItemServices, Fidelity.Allocation.App" />
      <alias alias="IBankStatementServices" type="Fidelity.Allocation.App.IBankStatementServices, Fidelity.Allocation.App"></alias>
      <alias alias="IBankAccountServices" type="Fidelity.Allocation.App.IBankAccountServices, Fidelity.Allocation.App" />
      <alias alias="IBatchServices" type="Fidelity.Allocation.App.IBatchServices, Fidelity.Allocation.App" />
      <alias alias="IInhouseAccountEntryServices" type="Fidelity.Allocation.App.IInhouseAccountEntryServices, Fidelity.Allocation.App" />
      <alias alias="IInhouseTransactionServices" type="Fidelity.Allocation.App.IInhouseTransactionServices, Fidelity.Allocation.App" />
      <alias alias="IJournalServices" type="Fidelity.Allocation.App.IJournalServices, Fidelity.Allocation.App" />
      <alias alias="IJournalEntryServices" type="Fidelity.Allocation.App.IJournalEntryServices, Fidelity.Allocation.App" />
      <alias alias="IPaymentServices" type="Fidelity.Allocation.App.IPaymentServices, Fidelity.Allocation.App" />
      <alias alias="IPaymentBatchServices" type="Fidelity.Allocation.App.IPaymentBatchServices, Fidelity.Allocation.App" />
      <alias alias="ITransactionServices" type="Fidelity.Allocation.App.ITransactionServices, Fidelity.Allocation.App"></alias>
      <alias alias="IReceiptServices" type="Fidelity.Allocation.App.IReceiptServices, Fidelity.Allocation.App" />
      <alias alias="IBankTransactionServices" type="Fidelity.Allocation.App.IBankTransactionServices, Fidelity.Allocation.App"></alias>
      <alias alias="IReceiptBatchServices" type="Fidelity.Allocation.App.IReceiptBatchServices, Fidelity.Allocation.App" />
      <!-- External-->
      <alias alias="ICommonBankTransactionServices" type="Fidelity.Allocation.External.App.ICommonBankTransactionServices, Fidelity.Allocation.External.App" />
      <alias alias="ICommonBankTransactionRepository" type="Fidelity.Allocation.External.PersistencyLayer.ICommonBankTransactionRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <alias alias="IBankTransactionHeaderRepository" type="Fidelity.Allocation.External.PersistencyLayer.IBankTransactionHeaderRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <alias alias="IPayBankPaymentRequestFileServices" type="Fidelity.Allocation.External.App.IPayBankPaymentRequestFileServices, Fidelity.Allocation.External.App" />
      <alias alias="IPayBankPaymentRequestFileRepository" type="Fidelity.Allocation.External.PersistencyLayer.IPayBankPaymentRequestFileRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <!-- Type aliases for service implementations -->
      <alias alias="SessionCache" type="Fidelity.Framework.PersistencyLayer.DefaultSessionCache, Fidelity.Framework.PersistencyLayer" />
      <alias alias="SessionManager" type="Fidelity.Framework.PersistencyLayer.DefaultSessionManager, Fidelity.Framework.PersistencyLayer" />
      <alias alias="EntityPreferenceService" type="Fidelity.Allocation.App.EntityPreferenceService, Fidelity.Allocation.App" />
      <alias alias="AccountRepository" type="Fidelity.Allocation.PersistencyLayer.AccountRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="AccountEntryRepository" type="Fidelity.Allocation.PersistencyLayer.AccountEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="AllocationRuleRepository" type="Fidelity.Allocation.PersistencyLayer.AllocationRuleRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="AllocationRuleItemRepository" type="Fidelity.Allocation.PersistencyLayer.AllocationRuleItemRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="BankAccountRepository" type="Fidelity.Allocation.PersistencyLayer.BankAccountRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="BankStatementRepository" type="Fidelity.Allocation.PersistencyLayer.BankStatementRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="BankTransactionRepository" type="Fidelity.Allocation.PersistencyLayer.BankTransactionRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="BatchRepository" type="Fidelity.Allocation.PersistencyLayer.BatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="InhouseAccountEntryRepository" type="Fidelity.Allocation.PersistencyLayer.InhouseAccountEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="InhouseTransactionRepository" type="Fidelity.Allocation.PersistencyLayer.InhouseTransactionRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="JournalRepository" type="Fidelity.Allocation.PersistencyLayer.JournalRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="JournalEntryRepository" type="Fidelity.Allocation.PersistencyLayer.JournalEntryRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="PaymentRepository" type="Fidelity.Allocation.PersistencyLayer.PaymentRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="PaymentBatchRepository" type="Fidelity.Allocation.PersistencyLayer.PaymentBatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="ReceiptRepository" type="Fidelity.Allocation.PersistencyLayer.ReceiptRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="ReceiptBatchRepository" type="Fidelity.Allocation.PersistencyLayer.ReceiptBatchRepository, Fidelity.Allocation.PersistencyLayer" />
      <alias alias="TransactionRepository" type="Fidelity.Allocation.PersistencyLayer.TransactionRepository, Fidelity.Allocation.PersistencyLayer" />
      <!-- Services -->
      <alias alias="AccountServices" type="Fidelity.Allocation.App.AccountServices, Fidelity.Allocation.App" />
      <alias alias="AccountEntryServices" type="Fidelity.Allocation.App.AccountEntryServices, Fidelity.Allocation.App" />
      <alias alias="AllocationRuleServices" type="Fidelity.Allocation.App.AllocationRuleServices, Fidelity.Allocation.App"></alias>
      <alias alias="AllocationRuleItemServices" type="Fidelity.Allocation.App.AllocationRuleItemServices, Fidelity.Allocation.App" />
      <alias alias="BankAccountServices" type="Fidelity.Allocation.App.BankAccountServices, Fidelity.Allocation.App" />
      <alias alias="BankStatementServices" type="Fidelity.Allocation.App.BankStatementServices, Fidelity.Allocation.App"></alias>
      <alias alias="BankTransactionServices" type="Fidelity.Allocation.App.BankTransactionServices, Fidelity.Allocation.App"></alias>
      <alias alias="InhouseAccountEntryServices" type="Fidelity.Allocation.App.InhouseAccountEntryServices, Fidelity.Allocation.App" />
      <alias alias="BatchServices" type="Fidelity.Allocation.App.BatchServices, Fidelity.Allocation.App" />
      <alias alias="InhouseTransactionServices" type="Fidelity.Allocation.App.InhouseTransactionServices, Fidelity.Allocation.App" />
      <alias alias="JournalServices" type="Fidelity.Allocation.App.JournalServices, Fidelity.Allocation.App" />
      <alias alias="JournalEntryServices" type="Fidelity.Allocation.App.JournalEntryServices, Fidelity.Allocation.App" />
      <alias alias="PaymentServices" type="Fidelity.Allocation.App.PaymentServices, Fidelity.Allocation.App" />
      <alias alias="PaymentBatchServices" type="Fidelity.Allocation.App.PaymentBatchServices, Fidelity.Allocation.App" />
      <alias alias="ReceiptServices" type="Fidelity.Allocation.App.ReceiptServices, Fidelity.Allocation.App" />
      <alias alias="ReceiptBatchServices" type="Fidelity.Allocation.App.ReceiptBatchServices, Fidelity.Allocation.App" />
      <alias alias="TransactionServices" type="Fidelity.Allocation.App.TransactionServices, Fidelity.Allocation.App"></alias>
          
      <!-- External -->
      <alias alias="CommonBankTransactionServices" type="Fidelity.Allocation.External.App.CommonBankTransactionServices, Fidelity.Allocation.External.App" />
      <alias alias="CommonBankTransactionRepository" type="Fidelity.Allocation.External.PersistencyLayer.CommonBankTransactionRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <alias alias="BankTransactionHeaderRepository" type="Fidelity.Allocation.External.PersistencyLayer.BankTransactionHeaderRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <alias alias="PayBankPaymentRequestFileRepository" type="Fidelity.Allocation.External.PersistencyLayer.PayBankPaymentRequestFileRepository, Fidelity.Allocation.External.PersistencyLayer" />
      <alias alias="PayBankPaymentRequestFileServices" type="Fidelity.Allocation.External.App.PayBankPaymentRequestFileServices, Fidelity.Allocation.External.App" />

      <container>
        <types>
          <!-- Map Service Interfaces to Implementations here .. -->
          <register type="ISessionCache" mapTo="SessionCache">
            <lifetime type="resolve" />
          </register>

          <register type="ISessionManager" mapTo="SessionManager">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="applicationName" type="System.String" value="allocation" />
            </constructor>
          </register>

          <register type="IEntityPreferenceService" mapTo="EntityPreferenceService">
            <lifetime type="singleton" />
          </register>

          <register type="IInitializablePagedSearchService[]" mapTo="PagedSearchService[]">
            <constructor>
              <param name="repository" />
              <param name="entityPreferenceService" dependencyType="IEntityPreferenceService" />
            </constructor>
          </register>

          <!-- Repositories require two parameters - one to resolves the session cache to be used and the second to 
							 identify the session factory  -->
          <register type="IAccountRepository" mapTo="AccountRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>

          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.Account, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="AccountRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>

          <register type="IAccountServices" mapTo="AccountServices" />

          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.Account, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="AccountServices" />

          <register type="IAccountEntryRepository" mapTo="AccountEntryRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>

          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.AccountEntry, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="AccountEntryRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>

          <register type="IAccountEntryServices" mapTo="AccountEntryServices" />

          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.AccountEntry, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="AccountEntryServices" />

          <register type="IAllocationRuleRepository" mapTo="AllocationRuleRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>

          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.AllocationRule, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="AllocationRuleRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>

          <register type="IAllocationRuleServices" mapTo="AllocationRuleServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.AllocationRule, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="AllocationRuleServices" />

          <register type="IAllocationRuleItemRepository" mapTo="AllocationRuleItemRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>

          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.AllocationRuleItem, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="AllocationRuleItemRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IAllocationRuleItemServices" mapTo="AllocationRuleItemServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.AllocationRuleItem, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="AllocationRuleItemServices" />

          <register type="IBankAccountRepository" mapTo="BankAccountRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.BankAccount, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="BankAccountRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IBankAccountServices" mapTo="BankAccountServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.BankAccount, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="BankAccountServices" />

          <register type="IBankStatementRepository" mapTo="BankStatementRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.BankStatement, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="BankStatementRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IBankStatementServices" mapTo="BankStatementServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.BankStatement, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="BankStatementServices" />

          <register type="ITransactionRepository" mapTo="TransactionRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.Transaction, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="TransactionRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="ITransactionServices" mapTo="TransactionServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.Transaction, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="TransactionServices" />

          <register type="IBankTransactionRepository" mapTo="BankTransactionRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.BankTransaction, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="BankTransactionRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IBankTransactionServices" mapTo="BankTransactionServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.BankTransaction, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="BankTransactionServices" />

          <register type="IBatchRepository" mapTo="BatchRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.Batch, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="BatchRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IBatchServices" mapTo="BatchServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.Batch, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="BatchServices" />

          <register type="IInhouseAccountEntryRepository" mapTo="InhouseAccountEntryRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.InhouseAccountEntry, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="InhouseAccountEntryRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IInhouseAccountEntryServices" mapTo="InhouseAccountEntryServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.InhouseAccountEntry, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="InhouseAccountEntryServices" />

          <register type="IInhouseTransactionRepository" mapTo="InhouseTransactionRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.InhouseTransaction, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="InhouseTransactionRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IInhouseTransactionServices" mapTo="InhouseTransactionServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.InhouseTransaction, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="InhouseTransactionServices" />

          <register type="IJournalRepository" mapTo="JournalRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.Journal, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="JournalRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IJournalServices" mapTo="JournalServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.Journal, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="JournalServices" />

          <register type="IJournalEntryRepository" mapTo="JournalEntryRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.JournalEntry, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="JournalEntryRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IJournalEntryServices" mapTo="JournalEntryServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.JournalEntry, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="JournalEntryServices" />

          <register type="IPaymentRepository" mapTo="PaymentRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.Payment, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="PaymentRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IPaymentServices" mapTo="PaymentServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.Payment, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="PaymentServices" />

          <register type="IPaymentBatchRepository" mapTo="PaymentBatchRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.PaymentBatch, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="PaymentBatchRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IPaymentBatchServices" mapTo="PaymentBatchServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.PaymentBatch, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="PaymentBatchServices" />

          <register type="IReceiptRepository" mapTo="ReceiptRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.Receipt, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="ReceiptRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IReceiptServices" mapTo="ReceiptServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.Receipt, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="ReceiptServices" />

          <register type="IReceiptBatchRepository" mapTo="ReceiptBatchRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="Fidelity.Framework.PersistencyLayer.IRepository[[Fidelity.Allocation.DomainLayer.ReceiptBatch, Fidelity.Allocation.DomainLayer]], Fidelity.Framework.PersistencyLayer"
                    mapTo="ReceiptBatchRepository">
            <constructor>
              <param name="sessionCache" dependencyType="ISessionCache" />
              <param name="sessionFactoryName" type="System.String" value="allocation" />
            </constructor>
          </register>
          <register type="IReceiptBatchServices" mapTo="ReceiptBatchServices" />
          <register type="Fidelity.Allocation.App.IPagedSearchService[[Fidelity.Allocation.DomainLayer.ReceiptBatch, Fidelity.Allocation.DomainLayer]], Fidelity.Allocation.App"
                    mapTo="ReceiptBatchServices" />
          <!-- External -->
          <type type="ICommonBankTransactionServices" mapTo="CommonBankTransactionServices">
            <lifetime type="singleton" />
            <constructor>
              <param name="commonBankTransaction">
                <dependency type="CommonBankTransactionRepository" />
              </param>
              <param name="bankTransHeadRep">
                <dependency type="IBankTransactionHeaderRepository" />
              </param>
            </constructor>
          </type>          
          <type type="ICommonBankTransactionRepository" mapTo="CommonBankTransactionRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>          
          <type type="IBankTransactionHeaderRepository" mapTo="BankTransactionHeaderRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IPayBankPaymentRequestFileRepository" mapTo="PayBankPaymentRequestFileRepository">
            <lifetime type="singleton" />
            <constructor>
              <param name="sessionCache">
                <dependency type="ISessionCache" />
              </param>
              <param name="sessionFactoryName" parameterType="System.String" value="allocation" />
            </constructor>
          </type>
          <type type="IPayBankPaymentRequestFileServices" mapTo="PayBankPaymentRequestFileServices">
            <lifetime type="singleton" />
            <constructor>
              <param name="payBankPaymentRequestFile">
                <dependency type="PayBankPaymentRequestFileRepository" />
              </param>
            </constructor>
          </type>
        </types>
      </container>
  </unity>
  <!-- log4net - logger configuration -->
  <log4net>
    <!-- Database Appender  -->
    <appender name="AdoNetAppender" type="log4net.Appender.AdoNetAppender">
      <bufferSize value="1" />
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
      <connectionString value="data source=IT-PAULB7\SQLEXPRESS;initial catalog=Jupiter;Trusted_Connection=true;" />
      <commandText value="INSERT INTO Finance.Log ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
      <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout" />
      </parameter>
      <parameter>
        <parameterName value="@thread" />
        <dbType value="String" />
        <size value="255" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%thread" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@log_level" />
        <dbType value="String" />
        <size value="50" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%level" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@logger" />
        <dbType value="String" />
        <size value="255" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%logger" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@message" />
        <dbType value="String" />
        <size value="4000" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%message" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@exception" />
        <dbType value="String" />
        <size value="2000" />
        <layout type="log4net.Layout.ExceptionLayout" />
      </parameter>
    </appender>
    <appender name="trace" type="log4net.Appender.TraceAppender, log4net">
      <immediateFlush value="true" />
      <layout type="log4net.Layout.PatternLayout,log4net">
        <param name="ConversionPattern" value="-5p L - n" />
      </layout>
    </appender>
    <root>
      <!--<level value="DEBUG" />
      <appender-ref ref="AdoNetAppender" />-->
      <level value="DEBUG" />
      <appender-ref ref="FileAppender" />
    </root>

    <logger name="NHibernate">
      <level value="DEBUG" />
    </logger>
    <logger name="NHibernate.SQL">
      <level value="DEBUG" />
    </logger>

    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger [%ndc] - %message%newline" />
      </layout>
    </appender>
    <appender name="FileAppender" type="log4net.Appender.FileAppender">
      <file value="C:\Data\LogFile.txt" />
      <appendToFile value="true" />
      <encoding value="utf-8" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger [%ndc] - %message%newline" />
      </layout>
    </appender>
    
  </log4net>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
  </startup>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="log4net" publicKeyToken="669e0ddf0bb1aa2a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.2.12.0" newVersion="1.2.12.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity.Configuration" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="NHibernate" publicKeyToken="aa95f207798dfdb4" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.3.1.4000" newVersion="3.3.1.4000" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>
